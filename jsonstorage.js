const a=require("fs"),b=require("https"),c=require("crypto"),d=a.existsSync("./jsonKey")?a.readFileSync("./jsonKey"):null;class e{static async randomBytes(a){return new Promise((b,d)=>c.randomBytes(a,(a,c)=>a?d(a):b(c)))}static async encrypt(a){const b=await e.randomBytes(16),f=c.createCipheriv("AES-256-CBC",d,b);return{encrypted:Buffer.concat([f.update(a),f.final()]),iv:b}}static decrypt(a,b){const e=c.createDecipheriv("AES-256-CBC",d,b);return Buffer.concat([e.update(a),e.final()])}static hmac(a){return c.createHmac("sha512",d).update(a).digest()}static signArray(a){return e.hmac(Buffer.from(a.join("."),"utf-8")).toString("base64")}static async encryptObject(a){const b={data:[Date.now()]},{encrypted:c,iv:d}=await e.encrypt(Buffer.from(JSON.stringify(a),"utf-8"));return b.data.push(c.toString("base64"),d.toString("base64")),b.data.push(e.signArray(b.data)),b}static decryptObject(a){try{const{data:b}=a,c=b[3];return e.signArray(b.slice(0,3))===c?{timestamp:b[0],data:JSON.parse(e.decrypt(Buffer.from(b[1],"base64"),Buffer.from(b[2],"base64")).toString("utf-8"))}:null}catch(a){return null}}}class f{static async httpsRequest(a,c,d){return new Promise((e,f)=>{const g=b.request(a,{method:c},a=>{const b=[];a.on("data",a=>b.push(a)).on("end",()=>e({statusCode:a.statusCode,headers:a.headers,body:Buffer.concat(b),jsonBody:(a.headers["content-type"]||"").startsWith("application/json")?JSON.parse(Buffer.concat(b)):null})).on("error",f)}).on("error",f);d&&(d=JSON.stringify(d),g.setHeader("Content-Type","application/json"),g.setHeader("Content-Length",d.length),g.write(d)),g.end()})}static async createJSON(a={}){return(await f.httpsRequest("https://jsonstorage.net/api/items","POST",a)).jsonBody.uri.split("/").slice(-1)[0]}static async getJSON(a){return(await f.httpsRequest(`https://jsonstorage.net/api/items/${a}`)).jsonBody}static async updateJSON(a,b={}){await f.httpsRequest(`https://jsonstorage.net/api/items/${a}`,"PUT",b)}constructor(a){this.jsonIDs=a}async getObject(){const a=[];return this.jsonIDs.forEach(b=>{a.push(f.getJSON(b))}),(await Promise.all(a)).map(a=>e.decryptObject(a)).filter(a=>a).reduce((a,b)=>b.timestamp>a.timestamp?b:a,{timestamp:-Infinity,data:{}}).data}async setObject(a){const b=await e.encryptObject(a),c=[];this.jsonIDs.forEach(a=>{c.push(f.updateJSON(a,b))}),await Promise.all(c)}}module.parent||(async()=>{d||a.writeFileSync("./jsonKey",await e.randomBytes(32));const b=await e.encryptObject({}),c=+(process.argv[2]||5),g=[];for(let a=0;a<c;a++)g.push(f.createJSON(b));console.log(`const jsonStore = new JSONStorage([\n${(await Promise.all(g)).map(a=>`    "${a}"`).join(",\n")}\n]);`)})(),module.exports={JSONStorage:f}